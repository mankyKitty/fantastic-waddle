#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2><h3>%e</h3>"
#+OPTIONS: num:nil
#+OPTIONS: toc:nil

#+TITLE: Reflexive Art
#+AUTHOR: Sean Chalmers
#+EMAIL: sean.chalmers@data61.csiro.au

* The Goals
 - Introduce Reflex =svg= and =canvas= libraries.
 - Show that Haskell is more than capable of front-end art & animation.
 - Encourage / inspire you to take the plunge!
* Generative and Evolutionary Art
 - Largely autonomous
 - Often emergent
 - Yet another fascinating rabbit hole
** Sometimes familiar
#+DOWNLOADED: http://www.complexification.net/gallery/machines/substrate/substrate0014.jpg @ 2018-08-08 11:46:12
[[file:genEvoArt/substrate0014_2018-08-08_11-46-12.jpg]]

- Title: *Substrate*
- Source: [[http://www.complexification.net/gallery/machines/substrate/index.php][Complexification]]

** Occasionally bizarre
#+ATTR_HTML: :width 60% :height 60%
file:genEvoArt/hairball_mantra_10_1_2018-08-08_11-55-33.jpg

- Title: *Coloured Trails (Point Advection & Rendering)*
- Source: [[http://www.entagma.com/colored-trails-point-advection-rendering/][Entagma]]

** Often simple
#+ATTR_HTML: :width 40% :height 40%
file:genEvoArt/tiledLines.png 

- Title: *Tiled Lines*
- Image: [[https://github.com/mankyKitty/fantastic-waddle][This Presentation]]
- Technique: [[https://generativeartistry.com/tutorials/tiled-lines][Generative Artistry]]

* Why Haskell?
  - Types
    - Types
      - Functions as values
        - Types
          - Lens
            - Types
              - GHC
                - Types
                  - ~traverse~
* Why Reflex?
  - Functional Reactive Programming.
  - Flexible and powerful technique for describing interactions over time.
  - Not enough time to provide a /complete/ tutorial.
    - Check references for some links, or come ask me later!
** The basics
   - ~Event~ : a value at *a point* in time.
   - ~Behaviour~ : a value at *all points* in time.
   - ~Dynamic~ : Combination of an ~Event~ and a ~Behaviour~.
     - Unique to Reflex.
** Instances & combinators
   - ~Event~ : ~Functor~
   - ~Behaviour~ and ~Dynamic~ : ~Functor~, ~Applicative~, ~Monad~
   - Things can become a little... terse.
     #+INCLUDE: "../frontend/src/SVG/Squares.hs" :LINES "288-290" src haskell
* Tiled Lines
** Basic Idea
   #+ATTR_REVEAL: :frag (roll-in)
   - Draw a line of predetermined length
   - Decide to turn 90degrees left or right
   - Draw a line of predetermined length
   - Repeat ${(size/step)^2}$ times
** Random Have I ? Can
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "52-56" src haskell
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "74-84" src haskell
** Glorious Loops
   #+ATTR_REVEAL: :frag (roll-in)
   - Ancient '~for~' runes, circa 3050BC
    #+BEGIN_SRC javascript
for (var x = 0; x < size; x += step) {
  for (var y = 0; y < size; y += step) {
  }
}
    #+END_SRC
   - More modern functional variant
    #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "129-133" src haskell
** Bump step
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "145-147" src haskell
** Step state
   #+BEGIN_SRC haskell
foldDyn :: (... t, ... m) => (a -> b -> b) -> b -> Event t a -> m (Dynamic t b)
   #+END_SRC
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "141-143" src haskell
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "151-155" src haskell
** Enter The Canvas 
   - Use ~ghcjs-dom~ for API functions:
     #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "30-31" src haskell
     #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "126-128" src haskell
   - We still need a ~CanvasRenderingContext2D~:
     #+INCLUDE: "../frontend/src/Canvas2D/Internal.hs" :LINES "24-34" src haskell
** Fingers on the screen
   #+BEGIN_SRC haskell
requestDomAction :: DomRenderHook t m => Event t (JSM a) -> m (Event t a)
   #+END_SRC
   #+ATTR_REVEAL: :frag (roll-in)
   - Send our instructions to the canvas
     #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "162-169" src haskell
** Drawing the lines    
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "125-136" src haskell
* Squares
* Game of Life
** Nothing up my sleeves
** Orchestration
** Pew pew photons
* Are we 3D yet?

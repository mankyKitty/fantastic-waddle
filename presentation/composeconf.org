#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2><h4>Queensland&nbsp;Functional&nbsp;Programming&nbsp;Lab</h4><h3>%e</h3>"
#+OPTIONS: num:nil
#+OPTIONS: toc:nil

#+TITLE: Reflexive Art
#+AUTHOR: Sean Chalmers
#+EMAIL: sean.chalmers@data61.csiro.au

* The Goals
 - Introduce Reflex =svg= and =canvas= libraries.
 - Show Haskell is capable of front-end art & animation.
 - Encourage / inspire you to take the plunge!
* Generative and Evolutionary Art
  #+ATTR_REVEAL: :frag (roll-in)
 - Predominantly computer generated
 - Repetitive algorithm influenced by random or external input
 - A fascinating rabbit hole
** familiar
#+DOWNLOADED: http://www.complexification.net/gallery/machines/substrate/substrate0014.jpg @ 2018-08-08 11:46:12
[[file:genEvoArt/substrate0014_2018-08-08_11-46-12.jpg]]

- Title: *Substrate*
- Source: [[http://www.complexification.net/gallery/machines/substrate/index.php][Complexification]]
** bizarre
#+ATTR_HTML: :width 60% :height 60%
file:genEvoArt/hairball_mantra_10_1_2018-08-08_11-55-33.jpg

- Title: *Coloured Trails (Point Advection & Rendering)*
- Source: [[http://www.entagma.com/colored-trails-point-advection-rendering/][Entagma]]
** simple
#+ATTR_HTML: :width 40% :height 40% :style background-color:white;
file:genEvoArt/tiledLines.png

- Title: *Tiled Lines*
- Image: [[https://github.com/mankyKitty/fantastic-waddle][This Presentation]]
- Technique: [[https://generativeartistry.com/tutorials/tiled-lines][Generative Artistry]]
* Why Haskell?
  - Cool Types
    - Clever Types
      - Silly Types
        - Types that climb on rocks
          - Functions as values
            - Lenses
              - GHC/GHCJS
                - ~traverse~
* Why Reflex?
  - Functional Reactive Programming
  - Flexible and powerful technique for describing interactions over time
  - Check the references for some links
  - Come to the workshop tomorrow!!
** The basics
   #+ATTR_REVEAL: :frag (roll-in)
   - ~Event~ : a value at *a point* in time.
   - ~Behaviour~ : a value at *all points* in time.
   - ~Dynamic~ : Combination of an ~Event~ and a ~Behaviour~.
     * Unique to Reflex.
   - 'Primitives' for creating and manipulating the above
   - Lean heavily on existing abstractions:
     - ~Functor~, ~Applicative~, ~Monad~, and friends.
* Tiled Lines - Canvas
  #+ATTR_HTML: :width 40% :height 40% :style background-color:white;
  file:genEvoArt/tiledLines.png
** Basic Idea
   #+ATTR_REVEAL: :frag (roll-in)
   - Draw a line of predetermined length
   - Decide to turn 90$^{\circ}$ left or right
   - Draw a line of predetermined length
   - Repeat ${(size/step)^2}$ times
** Draw a line
  #+ATTR_REVEAL: :frag (roll-in)
  - JavaScript
    #+BEGIN_SRC javascript
      context.beginPath();
      context.moveTo(a,b);
      context.lineTo(c,d);
      context.closePath();
      context.stroke();
    #+END_SRC
  - Use ~ghcjs-dom~ package for API functions
  - No need to write manual FFI calls!
  - Haskell
    #+BEGIN_SRC haskell
      beginPath context
      moveTo context a b
      lineTo context c d
      closePath context
      stroke context
    #+END_SRC
** Requesting a Canvas Context
   We need a canvas rendering context:
   #+ATTR_REVEAL: :frag (roll-in)
   - Create your canvas
     #+INCLUDE: "../frontend/src/Canvas2D/Internal.hs" :LINES "29-31" src haskell
   - Ask ~reflex-dom-canvas~ for a 2d drawing context
     #+BEGIN_SRC haskell
       dContext2d :: ... => CanvasConfig 'TwoD t -> m (Dynamic t (CanvasInfo 'TwoD t))
     #+END_SRC
     #+INCLUDE: "../frontend/src/Canvas2D/Internal.hs" :LINES "33-34" src haskell
   - Yay!
     #+BEGIN_SRC haskell
     data CanvasInfo (c :: ContextType) t = CanvasInfo
       { _canvasInfo_El      :: RD.El t
       , _canvasInfo_context :: RenderContext c
       ...
     #+END_SRC
** random Have i ? can
   Decide to turn left or right...
   #+ATTR_REVEAL: :frag (roll-in)
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "52-56" src haskell
   #+ATTR_REVEAL: :frag (roll-in)
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "74-84" src haskell
** Glorious loops
   Repeat, lots.
   #+ATTR_REVEAL: :frag (roll-in)
   - imperative, mutable
    #+BEGIN_SRC javascript
for (var x = 0; x < size; x += step) {
  for (var y = 0; y < size; y += step) {
  }
}
    #+END_SRC
   - functional, immutable
    #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "129-133" src haskell
** Glorious lines
#+BEGIN_SRC haskell
  requestDomAction :: DomRenderHook t m => Event t (JSM a) -> m (Event t a)

  _ <- requestDomAction $
    current (drawSteps <$> dCx) <@ ePost
#+END_SRC
** Step input
   Create a text input for our step size
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "137-139" src haskell
** Step bump
   Add some buttons
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "145-147" src haskell
   #+BEGIN_SRC haskell
eInc, eDec :: Event t ()
   #+END_SRC
** Step state
   Keep track of the step size as it changes over time.
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "151-155" src haskell
   #+ATTR_REVEAL: :frag (roll-in)
   #+BEGIN_SRC haskell
foldDyn :: (... t, ... m) => (a -> b -> b) -> b -> Event t a -> m (Dynamic t b)
   #+END_SRC
   #+ATTR_REVEAL: :frag (roll-in)
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "141-143" src haskell
** Wiring it in
   #+BEGIN_SRC haskell
  _ <- requestDomAction $
    current (drawSteps <$> dStep <*> dCx) <@ ( ePost <> eStep )
   #+END_SRC
** Drawing the lines
   #+INCLUDE: "../frontend/src/Canvas2D/TiledLines.hs" :LINES "125-136" src haskell
* Squares - SVG
  #+ATTR_HTML: :width 40% :height 40%
  file:Squares%20-%20SVG/final_colored_grid_2018-08-20_13-11-31.png
  - Source: [[https://www.kovach.me/posts/2018-03-07-generating-art.html][Benjamin Kovach]]
** Basic Idea
   #+ATTR_REVEAL: :frag (roll-in)
   - Randomly place a bunch of squares such that none intersect
   - Randomly apply colouring and fill to each square
   - Apply perlin noise to the corners of the squares
** Ewww, strings
   #+ATTR_REVEAL: :frag (roll-in)
   - Using custom elements in ~reflex-dom~ is stringly
     #+BEGIN_SRC haskell
elAttr "rect" ("x" =: "30" <> "y" =: "40" <> "width" =: "100" <> "height" =: "200") blank
     #+END_SRC
   - The element tag and properties must be given as ~Text~ values
   - Typos abound!
** Introducing ~reflex-dom-svg~
   #+ATTR_REVEAL: :frag (roll-in)
   - This package provides data types for:
     #+ATTR_REVEAL: :frag (roll-in)
     * All the basic shapes: ~rect~, ~path~, ~circle~, ...
     * Their required and some optional properties
     * A DSL for creating ~path~ properties
     * The ~animate~ element
   - It also provides functions, lenses, and prisms to make your life easier
** Thus
   #+ATTR_REVEAL: :frag (roll-in)
   - What was sad
     #+BEGIN_SRC haskell
... "rect" ("x" =: "30" <> "y" =: "40" <> "width" =: "100" <> "height" =: "200")
     #+END_SRC
   - Becomes happy
     #+BEGIN_SRC haskell
data SVG_Rect = SVG_Rect
  { _svg_rect_pos_x          :: Pos X
  , _svg_rect_pos_y          :: Pos Y
  , _svg_rect_width          :: Width
  , _svg_rect_height         :: Height
  , _svg_rect_cornerRadius_x :: Maybe (CornerRadius X)
  , _svg_rect_cornerRadius_y :: Maybe (CornerRadius Y)
  }
     #+END_SRC
** Put the G in SVG
   #+ATTR_REVEAL: :frag (roll-in)
   - To put a basic shape on the page
     #+BEGIN_SRC haskell
-- No child elements
svgBasicDyn_ :: s -> (p -> Map Text Text) -> Dynamic t p -> m (SVGEl t s)

-- Only allow a subset of SVG elements as possible child elements
svgBasicDyn  :: s -> (p -> Map Text Text) -> Dynamic t p
  -> Dynamic t (Map (CanBeNested s) (Map Text Text))
  -> m (SVGEl t s)
     #+END_SRC
   - Looks like
     #+BEGIN_SRC haskell
SVG.svgBasicDyn_
  SVG.Rect          -- Indicate we want a '<rect>' element
  SVG.makeRectProps -- Use the library provided function for handling properties
  dMyRectProps      -- Provide a Dynamic of our SVG_Rect
     #+END_SRC
** Data structures for great justice
   #+ATTR_REVEAL: :frag (roll-in)
   - We will use a ~polygon~ for our squares
     #+BEGIN_SRC haskell
          data SVG_Polygon = SVG_Polygon
            { _svg_polygon_start :: (Pos X, Pos Y)
            , _svg_polygon_path  :: NonEmpty (Pos X, Pos Y)
            }
     #+END_SRC
   - We benefit from all the delicious /existing/ abstractions
     - ~Functor~, ~Applicative~, ~Traversable~
   - Apply the perlin noise function to every point in a polygon
     #+ATTR_REVEAL: :frag (roll-in)
     - Given
       #+INCLUDE: "../frontend/src/SVG/Types.hs" :LINES "53-57" src haskell
     - We can lens & ~traverse~ our way to victory!
       #+INCLUDE: "../frontend/src/SVG/Squares.hs" :LINES "189-194" src haskell
** Gift keeps giving
   #+ATTR_REVEAL: :frag (roll-in)
   - ~reflex~ provides additional functionality for collections
     #+BEGIN_SRC haskell
simpleList :: Dynamic t [v] -> (Dynamic t v -> m a) -> m (Dynamic t [a])
     #+END_SRC
   - So if you have a list of polygons that will change over time...
     #+BEGIN_SRC haskell
       dPolys :: Dynamic t (NonEmpty Poly)
       dPerlin :: Dynamic t (Poly -> Poly)
     #+END_SRC
     #+INCLUDE: "../frontend/src/SVG/Squares.hs" :LINES "311-315" src haskell
** Moving parts
   We have a few things to juggle:
   #+ATTR_REVEAL: :frag (roll-in)
   - Maximum number of squares to be generated
   - Changing 'scale' value for use in the perlin noise function
   - Automatic or manual update to element properties
** Square Count
   #+INCLUDE: "../frontend/src/SVG/Squares.hs" :LINES "276-285" src haskell
** Scale Input
   #+INCLUDE: "../frontend/src/SVG/Squares.hs" :LINES "293-300" src haskell
** Toggle
   #+INCLUDE: "../frontend/src/SVG/Squares.hs" :LINES "301-305" src haskell
* Game of Life - WebGL
file:genEvoArt/gol.gif
- Source [[https://nullprogram.com/blog/2014/06/10/][Chris Wellons]]
** Basic idea
   Alright, so brace yourself, but what about...
   #+ATTR_REVEAL: :frag (roll-in)
   - Conway's 'Game of Life'...
   - But running in a fragment shader...
   - On the GPU...
   - eh?
   - eh?
** Shift yaks
   #+ATTR_REVEAL: :frag (roll-in)
   - Focus is no longer on drawing actions
   - Now it is orchestration of actions that draw
** Basic idea redux
   #+ATTR_REVEAL: :frag (roll-in)
   - Initialise two framebuffers
   - Populate one with random values
   - Run the fragment shader (which contains the game of life)
     #+ATTR_REVEAL: :frag (roll-in)
     - Execute the game of life for each pixel
     - Render the result to a framebuffer, not the screen
   - Paint the other framebuffer to the screen
   - Flip the framebuffers
   - Repeat
** Initialising WebGL
   #+ATTR_REVEAL: :frag (roll-in)
   - Context
   - Shaders - needs compiling
   - Programs - needs linking
** Don't forget
   #+ATTR_REVEAL: :frag (grow)
   - We're
   - not
   - writing
   - javascript.
** Monad transformers, woo
   We can have /nicer/ things.
   #+INCLUDE: "../frontend/src/WebGL/Types.hs" :LINES "80-98" src haskell
   /nb:/ ~MonadJSM~ ~ ~MonadIO~ when building with GHCJS.
** Unremarkable code
   #+INCLUDE: "../frontend/src/WebGL/Internal.hs" :LINES "46-53" src haskell
   #+INCLUDE: "../frontend/src/WebGL/Internal.hs" :LINES "66-72" src haskell
** Code unremarkable
   Check for errors
   #+INCLUDE: "../frontend/src/WebGL/Internal.hs" :LINES "57-59" src haskell
   #+INCLUDE: "../frontend/src/WebGL/Internal.hs" :LINES "80-82" src haskell
   Lean on abstractions to handle plumbing
   #+INCLUDE: "../frontend/src/WebGL/Internal.hs" :LINES "73-78" src haskell
** Abstraction to ~Event~
   Reflex helps out here too:
   #+BEGIN_SRC haskell
     fanEither :: ... => Event t (Either a b) -> (Event t a, Event t b)
   #+END_SRC
   #+ATTR_REVEAL: :frag (roll-in)
   #+BEGIN_SRC haskell
     createGOL :: ... => WebGLRenderingContext -> m (Either Error GOL)
   #+END_SRC
   #+ATTR_REVEAL: :frag (roll-in)
   #+INCLUDE: "../frontend/src/WebGL/GOL.hs" :LINES "236-238" src haskell
   #+ATTR_REVEAL: :frag (roll-in)
   #+BEGIN_SRC haskell
     eError :: Event t Error
     eGol :: Event t GOL
   #+END_SRC
** Fork in the graph
   #+ATTR_REVEAL: :frag (roll-in)
   - An error - Bugger
   - An initialised environment - Woot
   - Reflex comes out to play, again.
   - ~Switching~
   - There are efficiency benefits too, as disconnected pieces of the graph are garbage collected
** Only what we need
   The FP way, narrow your focus/function to a smaller problem.
   #+ATTR_REVEAL: :frag (roll-in)
   - One to display the error
     #+BEGIN_SRC haskell
       golError :: ... => Error -> m ()
     #+END_SRC
   - One to run the orchestration for our WebGL
     #+BEGIN_SRC haskell
       golRender :: ... => GOLInfo t -> StdGen -> GOL -> m ()
     #+END_SRC
** Making the choice
   #+INCLUDE: "../frontend/src/WebGL/GOL.hs" :LINES "242-246" src haskell
** Manage change
   - Let Reflex manage our ~GOL~ record in a ~Dynamic~
     #+INCLUDE: "../frontend/src/WebGL/GOL.hs" :LINES "198-202" src haskell
   - Updated on a step or reset ~Event~
     #+BEGIN_SRC haskell
       eStepRendered :: Event t GOL
       eWasReset     :: Event t GOL
     #+END_SRC
** Step / Reset
   #+ATTR_REVEAL: :frag (roll-in)
   #+BEGIN_SRC haskell
step            :: ... =>           WebGLRenderingContext -> GOL -> m GOL
setInitialState :: ... => StdGen -> WebGLRenderingContext -> GOL -> m GOL
   #+END_SRC
   #+ATTR_REVEAL: :frag (roll-in)
   #+INCLUDE: "../frontend/src/WebGL/GOL.hs" :LINES "210-212" src haskell
   #+ATTR_REVEAL: :frag (roll-in)
   #+INCLUDE: "../frontend/src/WebGL/GOL.hs" :LINES "204-209" src haskell
** Recursive Definition
   #+INCLUDE: "../frontend/src/WebGL/GOL.hs" :LINES "197-212" src haskell
* Wrapping Up
** Nice bits
  #+ATTR_REVEAL: :frag (roll-in)
  - FP graphics, in the browser?! IT WORKS!!1eleventy!
  - Being able to use Mozilla Developer Network (MDN) docs is awesome
  - Hackage is full of awesome packages
    #+ATTR_REVEAL: :frag (roll-in)
    - linear
    - Clay
    - colour
** Sticky bits
   #+ATTR_REVEAL: :frag (roll-in)
   - Some types don't line up: ~ArrayBufferView~ doesn't exist in JS
   - Some optional function arguments... aren't
   - Snip of MDN for Canvas 2D ~fill~ function
       #+BEGIN_SRC javascript
void ctx.fill([fillRule]);
void ctx.fill(path[, fillRule]);
       #+END_SRC
       #+ATTR_REVEAL: :frag (roll-in)
   - Type of ~fill~ from ~ghcjs-dom~ for 2D Canvas
        #+BEGIN_SRC haskell
fill :: ... => CanvasRenderingContext2D -> Maybe CanvasWindingRule -> m ()
        #+END_SRC
* Have at it!        
  From here, many good things can come.
  - Games
  - Charts
  - More art
  - All driven by the power of FP
  - Nothing can stop you, try something
   
  Thank you. :)

* References
  - Reflex
    - Workshop by Dave Laing, Day 2 - ComposeConf 2018!!
    - https://github.com/reflex-frp/reflex-platform
    - https://github.com/obsidiansystems/obelisk
    - https://blog.qfpl.io/posts/reflex/basics/introduction/
  - MDN docs 
    - https://developer.mozilla.org/en-US/docs/Web/API
  - WebGL
    - Game of Life in a Fragment Shader
      https://nullprogram.com/blog/2014/06/10/
      
  ...and so many more, please come and ask!
